create table SalesmanDemo
(salesman_id "int" NOT NULL primary key,
name varchar(20) not null,
city varchar(20) not null,
commission decimal(2,2)  NOT NULL );

create table CustomerDemo
(customer_id "int" NOT NULL primary key,
customer_name varchar(20) not null,
city varchar(20) not null,
grade "int" not null,
salesman_id "int"  NOT NULL references SalesmanDemo(salesman_id) );

create table OrderDemo
(order_no "int" NOT NULL primary key,
purchase_amount "int" not null,
order_date date not null,
customer_id "int" references CustomerDemo(customer_id) ,
salesman_id "int" references SalesmanDemo(salesman_id) );

insert into SalesmanDemo values(11,'Pranav','Karwar',0.2);
insert into SalesmanDemo values(24,'Prasanna','Bengalore',0.3);
insert into SalesmanDemo values(39,'Prajwal','Kodagu',0.1);
insert into SalesmanDemo values(44,'Pooja','Hubli',0.5);
insert into SalesmanDemo values(15,'Prokta','Mysore',0.2);

insert into CustomerDemo values(101,'Bhargav','Mysore',1,15);
insert into CustomerDemo values(206,'Ramya','Bengalore',3,24);
insert into CustomerDemo values(225,'Rajesh','Hubli',2,39);
insert into CustomerDemo values(324,'Ravi','Mangalore',5,44);
insert into CustomerDemo values(456,'Rajdeep','Belagavi',3,15);
insert into CustomerDemo values(501,'Raghu','Dharavad',4,39);
insert into CustomerDemo values(300,'Bhavya','Bengalore',1,15);

insert into OrderDemo values(5,10000,'2020-03-25',101,11);
insert into OrderDemo values(10,5000,'2020-03-25',456,15);
insert into OrderDemo values(7,9500,'2020-04-30',225,44);
insert into OrderDemo values(11,8700,'2020-07-07',324,24);
insert into OrderDemo values(17,1500,'2020-07-07',206,39);

select * from SalesmanDemo;
select * from CustomerDemo;
select * from OrderDemo;

--1. write a SQL query to find the salesperson and customer who reside in the same city. Return Salesman, cust_name and city
select name, customer_name, CustomerDemo.city 
from CustomerDemo
INNER JOIN SalesmanDemo
ON CustomerDemo.salesman_id=SalesmanDemo.salesman_id
where CustomerDemo.city=SalesmanDemo.city

--2. write a SQL query to find those orders where the order amount exists between 500 and 2000. Return ord_no, purch_amt, cust_name, city
select order_no, purchase_amount, customer_name, city
from OrderDemo
INNER JOIN CustomerDemo
ON CustomerDemo.customer_id=OrderDemo.customer_id
where purchase_amount>500 and purchase_amount<2000

--3. write a SQL query to find the salesperson(s) and the customer(s) he represents. Return Customer Name, city, Salesman, commission
select customer_name, CustomerDemo.city, name, commission
from CustomerDemo
INNER JOIN SalesmanDemo
ON CustomerDemo.salesman_id=SalesmanDemo.salesman_id

--4. write a SQL query to find salespeople who received commissions of more than 12 percent from the company. Return Customer Name, customer city, Salesman, commission.
select customer_name, CustomerDemo.city, name, commission
from CustomerDemo
INNER JOIN SalesmanDemo
ON CustomerDemo.salesman_id=SalesmanDemo.salesman_id
where commission>0.12

--5. write a SQL query to locate those salespeople who do not live in the same city where their customers live and have received a commission of more than 12% from the company. Return Customer Name, customer city, Salesman, salesman city, commission
select customer_name, CustomerDemo.city, name, SalesmanDemo.city, commission
from CustomerDemo
INNER JOIN SalesmanDemo
ON CustomerDemo.salesman_id=SalesmanDemo.salesman_id
where CustomerDemo.city!=SalesmanDemo.city and commission>0.12

--6. write a SQL query to find the details of an order. Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission
select order_no, purchase_amount, customer_name, grade, name, commission
from OrderDemo
INNER JOIN CustomerDemo
ON OrderDemo.customer_id=CustomerDemo.customer_id
INNER JOIN SalesmanDemo
ON OrderDemo.salesman_id=SalesmanDemo.salesman_id

--7. Write a SQL statement to join the tables salesman, customer and orders so that the same column of each table appears once and only the relational rows are returned.
select CustomerDemo.customer_id, customer_name, CustomerDemo.city, grade, SalesmanDemo.salesman_id, name, SalesmanDemo.city, commission, order_no, purchase_amount, order_date
from CustomerDemo
INNER JOIN SalesmanDemo
ON CustomerDemo.salesman_id=SalesmanDemo.salesman_id
INNER JOIN OrderDemo
ON CustomerDemo.customer_id=OrderDemo.customer_id

--8. write a SQL query to display the customer name, customer city, grade, salesman, salesman city. The results should be sorted by ascending customer_id.
select customer_name, CustomerDemo.city, grade, name, SalesmanDemo.city
from CustomerDemo
INNER JOIN SalesmanDemo
ON CustomerDemo.salesman_id=SalesmanDemo.salesman_id
ORDER BY customer_id

--9. write a SQL query to find those customers with a grade less than 300. Return cust_name, customer city, grade, Salesman, salesmancity. The result should be ordered by ascending customer_id. 
select customer_name, CustomerDemo.city, grade, name, SalesmanDemo.city
from CustomerDemo
INNER JOIN SalesmanDemo
ON CustomerDemo.salesman_id=SalesmanDemo.salesman_id
WHERE grade<300 ORDER BY customer_id

--10. Write a SQL statement to make a report with customer name, city, order number, order date, and order amount in ascending order according to the order date to determine whether any of the existing customers have placed an order or not
select customer_name, city, order_no, order_date, purchase_amount
from CustomerDemo
LEFT OUTER JOIN OrderDemo
ON CustomerDemo.customer_id=OrderDemo.customer_id
ORDER BY order_date

--11. Write a SQL statement to generate a report with customer name, city, order number, order date, order amount, salesperson name, and commission to determine if any of the existing customers have not placed orders or if they have placed orders through their salesman or by themselves
select customer_name, CustomerDemo.city, order_no, order_date, purchase_amount, name, commission
from CustomerDemo
LEFT OUTER JOIN OrderDemo
ON CustomerDemo.customer_id=OrderDemo.customer_id
LEFT OUTER JOIN SalesmanDemo
ON CustomerDemo.salesman_id=SalesmanDemo.salesman_id

--12. Write a SQL statement to generate a list in ascending order of salespersons who work either for one or more customers or have not yet joined any of the customers
select * 
from SalesmanDemo
LEFT OUTER JOIN CustomerDemo
ON SalesmanDemo.salesman_id=CustomerDemo.salesman_id
ORDER BY SalesmanDemo.salesman_id

--13. write a SQL query to list all salespersons along with customer name, city, grade, order number, date, and amount
select name, customer_name, CustomerDemo.city, grade, order_no, order_date, purchase_amount
from SalesmanDemo
LEFT OUTER JOIN CustomerDemo
ON SalesmanDemo.salesman_id=CustomerDemo.salesman_id
LEFT OUTER JOIN OrderDemo
ON CustomerDemo.customer_id=OrderDemo.customer_id

--14. Write a SQL statement to make a list for the salesmen who either work for one or more customers or yet to join any of the customers. The customer may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier
select * 
from SalesmanDemo
LEFT OUTER JOIN CustomerDemo
ON SalesmanDemo.salesman_id=CustomerDemo.salesman_id
RIGHT OUTER JOIN OrderDemo
ON CustomerDemo.customer_id=OrderDemo.customer_id
WHERE purchase_amount>2000 and grade is NOT NULL

--15. Write a SQL statement to make a list for the salesmen who either work for one or more customers or yet to join any of the customers. The customer may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier
select * 
from SalesmanDemo
LEFT OUTER JOIN CustomerDemo
ON SalesmanDemo.salesman_id=CustomerDemo.salesman_id
RIGHT OUTER JOIN OrderDemo
ON CustomerDemo.customer_id=OrderDemo.customer_id
WHERE purchase_amount>2000 and grade is NOT NULL

--16. Write a SQL statement to generate a report with the customer name, city, order no. order date, purchase amount for only those customers on the list who must have a grade and placed one or more orders or which order(s) have been placed by the customer who neither is on the list nor has a grade.
select customer_name, city, order_no, order_date, purchase_amount
from CustomerDemo
RIGHT OUTER JOIN OrderDemo
ON CustomerDemo.customer_id=OrderDemo.customer_id
WHERE grade is NOT NULL

--17. Write a SQL query to combine each row of the salesman table with each row of the customer table
select *
from SalesmanDemo
CROSS JOIN CustomerDemo

--18. Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for all customers and vice versa for that salesperson who belongs to that city
select *
from SalesmanDemo
CROSS JOIN CustomerDemo
WHERE SalesmanDemo.city=CustomerDemo.city

--19. Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for every customer and vice versa for those salesmen who belong to a city and customers who require a grade
select *
from SalesmanDemo
CROSS JOIN CustomerDemo
WHERE SalesmanDemo.city=CustomerDemo.city and grade is NOT NULL

--20. Write a SQL statement to make a Cartesian product between salesman and customer i.e. each salesman will appear for all customers and vice versa for those salesmen who must belong to a city which is not the same as his customer and the customers should have their own grade
select *
from SalesmanDemo
CROSS JOIN CustomerDemo
WHERE SalesmanDemo.city!=CustomerDemo.city and grade is NOT NULL