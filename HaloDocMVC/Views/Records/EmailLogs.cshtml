﻿﻿@using static HaloDocMVC.Entity.Models.Constant;
@model HaloDocMVC.Entity.Models.RecordsModel;
@{
    Layout = "_Layout";
}

@{
    var AccountType = from AccountType e in Enum.GetValues(typeof(AccountType))
                      select new
                      {
                          ID = (int)e,
                          Name = e.ToString()
                      };
}

<div class="container-fluid px-4 mt-2 pb-3">
    <div class="d-flex justify-content-between my-2">
        <div class="d-flex align-self-center">
            <h4>Email Logs</h4>
        </div>
        <div class="backBtn">
            <a asp-controller="Home" asp-action="Index"><button><span class="material-icons back"><span class="material-symbols-outlined">arrow_back_ios</span></span>Back</button></a>
        </div>
    </div>

    <div class="card rounded shadow my-3">
        <!-- Filter Inputs -->
        <form id="FilterForm" class="mt-0" onsubmit="displayBusyIndicator()">
            <div class="row p-2">
                <div class="col-xl-2 col-md-3 col-sm-6 col-12">
                    <div class="form-floating mb-3">
                        <select asp-for="AccountType" asp-items="@(new SelectList(AccountType, "ID", "Name"))" class="form-select form-control shadow-none" id="AccountTypeDropDown">
                            <option value="0">All</option>
                        </select>
                        <label for="AccountTypeDropDown">Search By Role</label>
                    </div>
                </div>
                <div class="col-xl-2 col-md-3 col-sm-6 col-12">
                    <div class="form-floating mb-3">
                        <input asp-for="ReceiverName" type="text" class="form-control shadow-none" id="ReceiverName" placeholder="Enter Patient Name">
                        <label for="ReceiverName">Reciever Name</label>
                    </div>
                </div>
                <div class="col-xl-2 col-md-3 col-sm-6 col-12">
                    <div class="form-floating mb-3">
                        <input asp-for="Email" type="email" class="form-control shadow-none" id="Email" placeholder="Enter Email">
                        <label for="Email">Email Id</label>
                    </div>
                </div>
                <div class="col-xl-2 col-md-3 col-sm-6 col-12">
                    <div class="form-floating mb-3">
                        <input asp-for="StartDate" type="date" class="form-control shadow-none" id="CreatedDate" placeholder="Enter Created Date">
                        <label for="CreatedDate">Created Date</label>
                    </div>
                </div>
                <div class="col-xl-2 col-md-3 col-sm-6 col-12">
                    <div class="form-floating mb-3">
                        <input asp-for="EndDate" type="date" class="form-control shadow-none" id="SentDate" placeholder="Enter SentDate">
                        <label for="SentDate">Sent Date</label>
                    </div>
                </div>
                <div class="col-xl-2 col-md-3 col-sm-6 col-12 d-flex align-self-center justify-content-end">
                    <button type="button" id="Submit" class="btn btn-info text-white shadow-none me-2">Search</button>
                    <button type="button" id="Clear" class="btn border-info text-info shadow-none mx-2">Clear</button>
                </div>
            </div>
        </form>
        <!-- End Filter Inputs -->
        <!--List of Outcomes-->
        <div class="table-responsive">
            <table class="table table-responsive mt-3 mb-0 dataTable">
                <thead class="theadbg">
                    <tr>
                        @{
                            var i1 = @Model.SortedColumnEmail;
                            var J1 = @Model.IsAscending;
                            <th scope="col" class="dt-orderable-asc dt-orderable-desc @(i1 == "Recipient" ? (J1 == true ?"dt-ordering-asc" : "dt-ordering-desc" ) : "")" onclick="SetColumValue('Recipient')">
                                <small>Recipient</small>
                                <span class="dt-column-order"></span>
                            </th>
                            <th scope="col">Action</th>
                            <th scope="col" class="dt-orderable-asc dt-orderable-desc @(i1 == "RoleId" ? (J1 == true ?"dt-ordering-asc" : "dt-ordering-desc" ) : "")" onclick="SetColumValue('RoleId')">
                                <small>Role Name</small>
                                <span class="dt-column-order"></span>
                            </th>
                            <th scope="col" class="dt-orderable-asc dt-orderable-desc @(i1 == "EmailId" ? (J1 == true ?"dt-ordering-asc" : "dt-ordering-desc" ) : "")" onclick="SetColumValue('EmailId')">
                                <small>Email Id</small>
                                <span class="dt-column-order"></span>
                            </th>
                            <th scope="col" class="dt-orderable-asc dt-orderable-desc @(i1 == "CreateDate" ? (J1 == true ?"dt-ordering-asc" : "dt-ordering-desc" ) : "")" onclick="SetColumValue('CreateDate')">
                                <small>Created Date</small>
                                <span class="dt-column-order"></span>
                            </th>
                            <th scope="col">Sent Date</th>
                            <th scope="col">Sent</th>
                            <th scope="col" class="dt-orderable-asc dt-orderable-desc @(i1 == "SentTries" ? (J1 == true ?"dt-ordering-asc" : "dt-ordering-desc" ) : "")" onclick="SetColumValue('SentTries')">
                                <small>Sent Tries</small>
                                <span class="dt-column-order"></span>
                            </th>
                            <th scope="col">Confirmation Number</th>
                        }
                    </tr>
                </thead>
                <tbody class="table-group-divider" id="EmailLogs">
                    @foreach (var item in Model.EmailLogs)
                    {
                        <tr>
                            <td>@item.Recipient</td>
                            <td>@Enum.GetName(typeof(EmailAction), item.Action)</td>
                            <td>@Enum.GetName(typeof(AccountType), item.RoleId)</td>
                            <td>@item.EmailId</td>
                            <td>@item.CreateDate.ToString("MMM d, yyyy hh:mm tt")</td>
                            <td>@item.SentDate.ToString("MMM d, yyyy")</td>
                            <td>Yes</td>
                            <td>@item.SentTries</td>
                            <td>@item.ConfirmationNumber</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!-- End List of Outcomes-->
        <!--Pagination-->
        <nav aria-label="Page navigation example" id="Pagination">
            <div class="d-flex justify-content-between mx-2 mt-3">
                <div>
                    @if (Model.TotalPages == 0)
                    {
                        Model.CurrentPage = 0;
                    }
                    Page @Model.CurrentPage / @Model.TotalPages
                </div>
                <div>
                    <ul class="pagination pagination-container">
                        @{
                            int i;
                            <form id="paginationform" asp-action="EmailLogs" asp-controller="Records" novalidate="novalidate" class="d-flex mt-0" onsubmit="displayBusyIndicator()">
                                <input type="hidden" asp-for="PageSize" />
                                <input type="hidden" asp-for="CurrentPage" id="currentpagevalue" />
                                <input type="hidden" asp-for="AccountType" />
                                <input type="hidden" asp-for="ReceiverName" />
                                <input type="hidden" asp-for="Email" />
                                <input type="hidden" asp-for="StartDate" />
                                <input type="hidden" asp-for="EndDate" />

                                @if (@Model.CurrentPage > 1)
                                {
                                <li class="page-item me-2">
                                    <button class="btn shadow-none" onclick="setpagenumber('previous')">&lt;</button>
                                </li>
                                }
                                else
                                {
                                <li class="me-2 page-item">
                                    <button class="disabled btn">&lt;</button>
                                </li>
                                }
                                @for (i = 1; i <= @Model.TotalPages; i++)
                                {
                                <li class="page-item me-2">
                                    <button class="@(i == @Model.CurrentPage ? "activepagebtn" : "") btn shadow-none" onclick="setpagenumber(@i)">@i</button>
                                </li>
                                }
                                @if (@Model.TotalPages > @Model.CurrentPage)
                                {
                                <li class="page-item me-2">
                                    <button class="btn shadow-none" onclick="setpagenumber('next')">&gt;</button>
                                </li>
                                }
                                else
                                {
                                <li class="page-item">
                                    <button class="btn disabled">&gt;</button>
                                </li>
                                }
                            </form>
                        }
                    </ul>
                </div>
            </div>
        </nav>
        <!--End Pagination-->
    </div>
</div>
<form class="mt-0 sortingform" asp-action="EmailLogs" id="sortingform" asp-controller="Records" novalidate="novalidate" onsubmit="displayBusyIndicator()">
    <input type="hidden" asp-for="SortedColumnEmail" id="sortedcol" />
    <input type="hidden" asp-for="IsAscending" id="isAsc" />
    <input type="hidden" asp-for="AccountType" />
    <input type="hidden" asp-for="ReceiverName" />
    <input type="hidden" asp-for="Email" />
    <input type="hidden" asp-for="StartDate" />
    <input type="hidden" asp-for="EndDate" />
</form>
<partial name="../Shared/_Loader.cshtml" />
<script>
    modeldata = @Html.Raw(Json.Serialize(Model))

    const clear = document.getElementById("Clear");
    const submit = document.getElementById("Submit");

    clear.addEventListener("click", function () {
        const inputs = document.querySelectorAll("#FilterForm input[type='text'], #FilterForm input[type='date'], #FilterForm input[type='email']");
        inputs.forEach(input => {
            input.value = "";
        });

        document.getElementById('AccountTypeDropDown').selectedIndex = 0;
        $('#Submit').click();
    });

    $(document).ready(function () {
        $("#Submit").click(function () {
            var formData = $("#FilterForm").serialize();
            $.ajax({
                type: "POST",
                url: '@Url.Action("EmailLogs", "Records")',
                data: formData,
                cache: false,
                success: function (response) {
                    console.log(response);
                    var bodyContent = $(response).find('tbody').html();
                    var pagination = $(response).find('#Pagination').html();
                    var sortingform = $(response).find('#sortingform').html();
                    $('#EmailLogs').html(bodyContent);
                    $('#Pagination').html(pagination);
                    $('#sortingform').html(sortingform);
                }
            });
        });
    });

    function setpagenumber(e) {
        console.log(e)
        if (e == 'previous') {
            var cp = @Model.CurrentPage-1;
            $('#currentpagevalue').val(cp);
        }
        else if (e == 'next') {
            var cp = @Model.CurrentPage + 1;
            $('#currentpagevalue').val(cp);
        }
        else {
            $('#currentpagevalue').val(e);
        }
        $("#paginationform").submit();
    }
    function SetColumValue(e) {
        var modeldata = @Html.Raw(Json.Serialize(Model));
        console.log(modeldata)
        if (modeldata.sortedColumnEmail === e) {
            if (modeldata.isAscending == true) {
                document.getElementById('isAsc').value = false;
            }
            else {
                document.getElementById('isAsc').value = true;
            }
            console.log(document.getElementById('isAsc').value);
        }
        else {
            document.getElementById('sortedcol').value = e;
            document.getElementById('isAsc').value = true;
        }
        $("#sortingform").submit();
    }
</script>
