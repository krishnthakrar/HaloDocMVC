@{
    Layout = "_Layout";
    ViewData["Title"] = "User Access";
}
@{
    var enumData = from AccountType e in Enum.GetValues(typeof(AccountType))
                   select new
                   {
                       ID = (int)e,
                       Name = e.ToString()
                   };
}
@using static HaloDocMVC.Entity.Models.Constant;
@model HaloDocMVC.Entity.Models.UserAccess;
<style>
    .was-validated .form-check-input:valid ~ .form-check-label, .form-check-input:valid {
        color: black !important;
        border-color: #0dcaf0 !important;
    }
</style>
<div class="container">
    @* heading *@
    <div class="d-flex justify-content-between mt-4">
        <div class="d-flex align-self-center">
            <h4><strong>User Access</strong></h4>
        </div>
        <div class="backBtn">
            <a asp-controller="Home" asp-action="Index"><button><span class="material-icons back"><span class="material-symbols-outlined">arrow_back_ios</span></span>Back</button></a>
        </div>
    </div>

    <div class="card rounded shadow mt-3">
        <div class="d-flex justify-content-between p-3">
            <div class="search m-1">
                <a id="regionicon">
                    <i class="fa fa-search"></i>
                </a>
                <select class="form-select" asp-for="AccountType" data-allow-clear="true" tabindex="-1" id="roledropdown" onchange="getdatabyrole()" asp-items="@(new SelectList(enumData,"ID","Name"))" data-control="select2" data-placeholder="Select Level">
                    <option value="0">All</option>
                </select>
            </div>
            <div class="d-flex">
                <a class="btn bg-info text-white m-1 align-self-center" asp-action="CreateProvider" asp-controller="Access">
                    Create Provider Account
                </a>
                <a class="btn bg-info text-white m-1 align-self-center" asp-action="CreateAdmin" asp-controller="Access">
                    Create Admin Account
                </a>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-responsive mt-3 mb-0 dataTable">
                <thead class="theadbg">
                    <tr>
                        @{
                            var i1 = @Model.SortedColumn;
                            var J1 = @Model.IsAscending;
                            <th scope="col" class="dt-orderable-asc dt-orderable-desc @(i1 == "AccountType" ? (J1 == true ?"dt-ordering-asc" : "dt-ordering-desc" ) : "")" onclick="SetColumValue('AccountType')">
                                <small>Account Type</small>
                                <span class="dt-column-order"></span>
                            </th>
                            <th scope="col" class="dt-orderable-asc dt-orderable-desc @(i1 == "FirstName" ? (J1 == true ?"dt-ordering-asc" : "dt-ordering-desc" ) : "")" onclick="SetColumValue('FirstName')">
                                <small>Account POC</small>
                                <span class="dt-column-order"></span>
                            </th>
                            <th scope="col">Phone</th>
                            <th scope="col">Status</th>
                            <th scope="col">Open Request</th>
                            <th scope="col" class="text-center">Actions</th>
                        }
                    </tr>
                </thead>
                <tbody class="table-group-divider" id="rolebody">
                    @foreach (var item in Model.UA)
                    {
                        <tr>
                            <td>@Enum.GetName(typeof(AccountType), item.AccountType)</td>
                            <td>@item.FirstName</td>
                            <td>@item.Mobile</td>
                            <td>@Enum.GetName(typeof(AdminStatus), item.Status)</td>
                            <td>@item.OpenRequest</td>
                            <td class="d-flex justify-content-center">
                                @if (item.IsAdmin)
                                {
                                    <a asp-action="EditAdmin" asp-controller="Access" asp-route-id="@item.UserId" class="btn btn-outline-info btn-sm document-button mx-1">
                                        Edit
                                    </a>
                                }
                                else
                                {
                                    <a asp-action="EditProvider" asp-controller="Access" asp-route-id="@item.UserId" class="btn btn-outline-info btn-sm document-button mx-1">
                                        Edit
                                    </a>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!--Pagination-->
        <nav class="pagenav" aria-label="Page navigation example" id="Pagination">
            <div class="d-flex justify-content-between mx-2 mt-3">
                <div>
                    @if (Model.TotalPages == 0)
                    {
                        Model.CurrentPage = 0;
                    }
                    Page @Model.CurrentPage / @Model.TotalPages
                </div>
                <div>
                    <ul class="pagination pagination-container">
                        @{
                            int i;
                            <form id="paginationform" asp-action="UserAccess" asp-controller="Access" novalidate="novalidate" class="d-flex mt-0" onsubmit="displayBusyIndicator()">
                                <input type="hidden" asp-for="PageSize" />
                                <input type="hidden" asp-for="Role" />
                                <input type="hidden" asp-for="SortedColumn" />
                                <input type="hidden" asp-for="IsAscending" />
                                <input type="hidden" asp-for="CurrentPage" id="currentpagevalue" />
                                @if (@Model.CurrentPage > 1)
                                {
                                <li class="page-item me-2">
                                    <button class="btn shadow-none" onclick="setpagenumber('previous')">&lt;</button>
                                </li>
                                }
                                else
                                {
                                <li class="me-2 page-item">
                                    <button class="disabled btn">&lt;</button>
                                </li>
                                }
                                @for (i = 1; i <= @Model.TotalPages; i++)
                                {
                                <li class="page-item me-2">
                                    <button class="@(i == @Model.CurrentPage ? "activepagebtn" : "") btn shadow-none" onclick="setpagenumber(@i)">@i</button>
                                </li>
                                }
                                @if (@Model.TotalPages > @Model.CurrentPage)
                                {
                                <li class="page-item me-2">
                                    <button class="btn shadow-none" onclick="setpagenumber('next')">&gt;</button>
                                </li>
                                }
                                else
                                {
                                <li class="page-item">
                                    <button class="btn disabled">&gt;</button>
                                </li>
                                }
                            </form>
                        }
                    </ul>
                </div>
            </div>
        </nav>
        <!--End Pagination-->
    </div>
</div>
<form class="mt-0 sortingform" asp-action="UserAccess" id="sortingform" asp-controller="Access" novalidate="novalidate" onsubmit="displayBusyIndicator()">
    <input type="hidden" asp-for="Role" />
    <input type="hidden" asp-for="SortedColumn" id="sortedcol" />
    <input type="hidden" asp-for="IsAscending" id="isAsc" />
</form>
<partial name="../Shared/_Loader.cshtml" />
<script>
    function getdatabyrole() {
        var role = $("#roledropdown").val();
        if (role == '-1') {
            role = null;
            location.reload();
        }
        $.ajax({
            type: "POST",
            url: '@Url.Action("UserAccess", "Access")?role=' + role,
            cache: false,
            success: function (response) {
                var bodyContent = $(response).find('tbody').html();
                var pagination = $(response).find('.pagenav').html();
                var sortingform = $(response).find('.sortingform').html();
                console.log(sortingform);
                $('#Pagination').html(pagination);
                $('#rolebody').html(bodyContent);
                $('#sortingform').html(sortingform);
            },
            error: function () {
                alert("Error while Loading data.");
            }
        });
    }
    function setpagenumber(e) {
        if (e == 'previous') {
            var cp = @Model.CurrentPage-1;
            $('#currentpagevalue').val(cp);
        }
        else if (e == 'next') {
            var cp = @Model.CurrentPage + 1;
            $('#currentpagevalue').val(cp);
        }
        else {
            $('#currentpagevalue').val(e);
        }
        $("#paginationform").submit();
    }
    function SetColumValue(e) {
        var modeldata = @Html.Raw(Json.Serialize(Model));
        console.log(modeldata)
        if (modeldata.sortedColumn === e) {
            if (modeldata.isAscending == true) {
                document.getElementById('isAsc').value = false;
            }
            else {
                document.getElementById('isAsc').value = true;
            }
            console.log(document.getElementById('isAsc').value);
        }
        else {
            document.getElementById('sortedcol').value = e;
            document.getElementById('isAsc').value = true;
        }
        $(".sortingform").submit();
    }
</script> 