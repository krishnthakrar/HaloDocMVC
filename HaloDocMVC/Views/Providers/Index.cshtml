@model HaloDocMVC.Entity.Models.ProviderMenu;
﻿@using static HaloDocMVC.Entity.Models.Constant;
@{
    Layout = "_Layout";
    ViewData["Title"] = "Providers Menu";
}
<div class="body">
    <div class="container">
        <div class="d-flex justify-content-between mt-3">
            <div class="d-flex align-items-center">
                <h4 class="pt-2">Provider Information</h4>
            </div>
        </div>
        <div class="card border-0 shadow py-4 mb-5 mt-3 rounded p-3 rounded container">
            <div class="d-flex justify-content-between">
                <div class="search m-1">
                    <i class="fa fa-search"></i>
                    <select class="form-select" asp-for="Region" data-allow-clear="true" tabindex="-1" id="regiondropdown" onchange="regChange()" asp-items="@(new SelectList(ViewBag.AllRegion,"RegionId","RegionName"))" data-control="select2" data-placeholder="Select Level">
                        <option>All Region</option>
                    </select>
                </div>
                <div class="d-flex justify-content-between">
                    <form asp-action="ChangeNotificationPhysician" asp-controller="Providers" class="mt-0" id="saveChangesForm">
                        <input type="hidden" id="changedValuesInput" name="changedValues">
                        <a class="btn text-info m-2 border border-info align-self-center" style="display:none;" id="saveChangesButton">Save Changes </a>
                    </form>
                    <a asp-controller="Providers" asp-action="CreateProvider" class="btn btn-info rounded mb-1 align-self-center">
                        <span class="text-white">
                            <b>Create Provider Account</b>
                        </span>
                    </a>
                </div>
            </div>
            <table class="w-100 mt-3 table dataTable" id="fullTable">
                <thead class="theadbg py-2" id="tableHead">
                    <tr>
                        @{
                            var i1 = @Model.SortedColumn;
                            var J1 = @Model.IsAscending;
                            <th scope="col" style="width:13%">
                                <small>Stop Notifications</small>
                            </th>
                            <th scope="col" style="position:relative;width:22%" class="dt-orderable-asc dt-orderable-desc @(i1 == "Name" ? (J1 == true ?"dt-ordering-asc" : "dt-ordering-desc" ) : "")" onclick="SetColumValue('Name')">
                                <small>Provider Name</small>
                                <span class="dt-column-order"></span>
                            </th>
                            <th scope="col" style="position:relative;width:22%" class="dt-orderable-asc dt-orderable-desc @(i1 == "Role" ? (J1 == true ?"dt-ordering-asc" : "dt-ordering-desc" ) : "")" onclick="SetColumValue('Role')">
                                <small>Role</small>
                                <span class="dt-column-order"></span>
                            </th>
                            <th scope="col" style="width:15%">
                                <small>On Call Status</small>
                            </th>
                            <th scope="col" style="width:10%">
                                <small>Status</small>
                            </th>
                            <th scope="col" style="width:15%">
                                <small>Actions</small>
                            </th>
                        }
                    </tr>
                </thead>
                <tbody class="mb-5" id="tableBody">
                    @foreach (var item in Model.ProviderData)
                    {
                        <tr>
                            <td scope="row">
                                @{
                                    var check = false;
                                    if (item.Notification != null)
                                    {
                                        check = item.Notification[0];
                                    }
                                    <input class="form-check-input form-check-inputs ms-5" id="@item.PhysicianId" type="checkbox" value="" @(check ? "checked" : "")>
                                }
                                <input class="NotificationId" type="hidden" value="@item.PhysicianId">
                            </td>
                            <td>@item.Name</td>
                            <td>@item.Role</td>
                            <td>
                                @Enum.GetName(typeof(OnCallStatus), item.IsNonDisclosureDoc)
                            </td>
                            <td>
                                @Enum.GetName(typeof(AdminStatus), item.Status)
                            </td>
                            <td>
                                <button class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#contactprovider" data-bs-id="@item.PhysicianId" data-bs-email="@item.Email" data-bs-mobile="@item.Mobile" style="padding-top: 0.1rem !important; padding-bottom: 0.1rem !important;">
                                    <small>Contact</small>
                                </button>
                                <a class="btn btn-outline-info" asp-action="EditProvider" asp-controller="Providers" asp-route-id="@item.PhysicianId" style="padding-top: 0.1rem !important; padding-bottom: 0.1rem !important;">
                                    <small>Edit</small>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <!--Pagination-->
            <nav class="pagenav" aria-label="Page navigation example" id="Pagination">
                <div class="d-flex justify-content-between mx-2 mt-3">
                    <div>
                        @if (Model.TotalPages == 0)
                        {
                            Model.CurrentPage = 0;
                        }
                        Page @Model.CurrentPage / @Model.TotalPages
                    </div>
                    <div>
                        <ul class="pagination pagination-container">
                            @{
                                int i;
                                <form id="paginationform" asp-action="Index" asp-controller="Providers" novalidate="novalidate" class="d-flex mt-0">
                                    <input type="hidden" asp-for="PageSize" />
                                    <input type="hidden" asp-for="Region" />
                                    <input type="hidden" asp-for="SortedColumn" />
                                    <input type="hidden" asp-for="IsAscending" />
                                    <input type="hidden" asp-for="CurrentPage" id="currentpagevalue" />
                                    @if (@Model.CurrentPage > 1)
                                    {
                                    <li class="page-item me-2">
                                        <button class="btn shadow-none" onclick="setpagenumber('previous')">&lt;</button>
                                    </li>
                                    }
                                    else
                                    {
                                    <li class="me-2 page-item">
                                        <button class="disabled btn">&lt;</button>
                                    </li>
                                    }
                                    @for (i = 1; i <= @Model.TotalPages; i++)
                                    {
                                    <li class="page-item me-2">
                                        <button class="@(i == @Model.CurrentPage ? "activepagebtn" : "") btn shadow-none" onclick="setpagenumber(@i)">@i</button>
                                    </li>
                                    }
                                    @if (@Model.TotalPages > @Model.CurrentPage)
                                    {
                                    <li class="page-item me-2">
                                        <button class="btn shadow-none" onclick="setpagenumber('next')">&gt;</button>
                                    </li>
                                    }
                                    else
                                    {
                                    <li class="page-item">
                                        <button class="btn disabled">&gt;</button>
                                    </li>
                                    }
                                </form>
                            }
                        </ul>
                    </div>
                </div>
            </nav>
            <form class="mt-0 sortingform" asp-action="Index" asp-controller="Providers" novalidate="novalidate" id="sortingForm">
                <input type="hidden" asp-for="Region" />
                <input type="hidden" asp-for="SortedColumn" id="sortedcol" />
                <input type="hidden" asp-for="IsAscending" id="isAsc" />
            </form>
            <!--End Pagination-->
        </div>
    </div>
</div>
<partial name="../Providers/ContactProvider.cshtml" />
<script>
    function regChange() {
        var region = $("#regiondropdown").val();
        console.log(region);
        $.ajax({
            method: "POST",
            url: "/Providers/Index?Region=" + region,
            cache: false,
            success: function (response) {
                var bodyContent = $(response).find('tbody').html();
                var pagination = $(response).find('.pagenav').html();
                var sorting = $(response).find('.sortingform').html();
                $('#tableBody').html(bodyContent);
                $('#Pagination').html(pagination);
                $('#sortingForm').html(sorting);
            },
            error: function () {
                alert("Error while Loading data.");
            }
        });
    }
    function setpagenumber(e) {
        if (e == 'previous') {
            var cp = @Model.CurrentPage-1;
            $('#currentpagevalue').val(cp);
        }
        else if (e == 'next') {
            var cp = @Model.CurrentPage + 1;
            $('#currentpagevalue').val(cp);
        }
        else {
            $('#currentpagevalue').val(e);
        }
        $("#paginationform").submit();
    }
    function SetColumValue(e) {
        var modeldata = @Html.Raw(Json.Serialize(Model));
        console.log(modeldata)
        if (modeldata.sortedColumn === e) {
            if (modeldata.isAscending == true) {
                document.getElementById('isAsc').value = false;
            }
            else {
                document.getElementById('isAsc').value = true;
            }
            console.log(document.getElementById('isAsc').value);
        }
        else {
            document.getElementById('sortedcol').value = e;
            document.getElementById('isAsc').value = true;
        }
        $(".sortingform").submit();
    }
    $(document).ready(function () {
        $('[data-bs-toggle="modal"][data-bs-target="#contactprovider"]').click(function () {
            var email = $(this).attr('data-bs-email');
            var mobile = $(this).attr('data-bs-mobile');
            $('#contactprovider').find('#emailInput').val(email);
            $('#contactprovider').find('#mobileInput').val(mobile);
        });

        $('#saveChangesButton').click(function () {
            $('#saveChangesForm').submit();
        });
        // Initialize an object to track the initial state of each checkbox
        var initialState = {};

        // Store the initial state of each checkbox when the page loads
        $('.form-check-inputs').each(function () {
            initialState[this.id] = this.checked;
        });

        $('.form-check-inputs').change(function () {
            var changedValues = {};
            // Check each checkbox for changes
            $('.form-check-inputs').each(function () {
                if (this.checked !== initialState[this.id]) {
                    changedValues[this.id] = this.checked;
                }
            });
            // Update the hidden input with the changed values
            $('#changedValuesInput').val(JSON.stringify(changedValues));
            console.log(changedValues);
            // Show or hide the "Save Changes" button based on whether there are any changes
            if (Object.keys(changedValues).length > 0) {
                $('#saveChangesButton').show();
            } else {
                $('#saveChangesButton').hide();
            }
        });
    });
</script> 